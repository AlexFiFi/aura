// Aura
// Script documentation file
//---------------------------------------------------------------------------

=============================================================================
| Introduction                                                              |
=============================================================================

...

=============================================================================
| Function template format                                                  |
=============================================================================

Braces
------
<> = Non-optional
[] = Optional
{} = Parameter list (variable amount 0-?)

Parameters
----------
<type:description>=default
The (C# variable) type of the function paramter is specified first,
followed by a colon and a short description of the parameter.
If paramters are omitted, they might default to some value. This value
is specified with an equal sign, after the description.

Examples
--------
SetName(<string:name>)
SetName has only one non-optional parameter, a string. This paramter
must be specified when calling the function.

SetBody([<float:height>=1.0f[, <float:fat>=1.0f[, <float:upper>=1.0f[, <float:lower>=1.0f]]])
SetBody has 4 optional paramters. they're all of type float, and default
to 1.0f (1.0 of type float) if they're omitted. The braces are nested,
because you have to specify all paramters, even if you only want to set
lower. The next paramter is only optional, if the previous one was specified.
An exception are named paramters, which can certainly be used.
(See 'SetBody' in the 'Functions' section for an example on how to use those.)
If you use named paramters, the remaining optional paramters default to the
specified default value.

=============================================================================
| Monster spawns                                                            |
=============================================================================

All monsters are defined in 'data/db/monsters.txt'.
All monster spawns are defined in 'data/db/spawns.txt'.

Example:
    The following entry specifies a spawn of 15 Gray Wolves (Monster 10001)
    in Tir (Region 1). The spawn locations are random, inside the specified
	area.
    10001, 15, 1, 4148,17021, 2989,22419, 11485,25677, 16145,21495, 14660,17278
	
The spawn area is specified with a series of coordinates. If only one point
(1x X and Y) is specified, the monsters would spawn exactly there.

X 100 Y 100
 ___________
|           |
|     x     |
|___________|

With two points, they'd spawn somewhere along the line of those two points.

X1 50  Y1 100
X2 150 Y2 100
 ___________
|           |
|  xxxxxxx  |
|___________|

With three points, they'd spawn somewhere inside the specified triangle.

X1 50  Y1 50
X2 150 Y2 100
X3 50  Y3 150
 ___________
|           |
|  xxxx     |
|  xxxxxxx  |
|  xxxx     |
|___________|

and so on.

X1 50  Y1 50
X2 150 Y2 150
X3 50  Y3 150
X4 150 Y4 50
 ___________
|           |
|  xxxxxxx  |
|  xxxxxxx  |
|  xxxxxxx  |
|___________|

=============================================================================
| Inheritance                                                               |
=============================================================================

Just like in C# NPCs can inherit from one another. This way you can create
base NPCs that are to be used in several locations, or alternate versions
for events. For this to work, the parent NPCs will have to be loaded, like
normal, by adding them in npclist.txt, together with the children.

For example, you could create one base NPC, that's supposed to stand in every
town. Let it inherit from NPCScript like normal, and place it on some test
map. Next you create the children, one for each town, and let them inherit
from your base NPC, instead of NPCScript. Now just override OnLoad,
call base.OnLoad, and change the position.

Since it would be annoying to place all parent NPCs on some test map though,
it's possible to load NPCs, without actually placing them on a map.
This can be done be prefixing the line in npclist.txt with "virtual:"

Example:
  virtual: regions/tir/caitin.cs
  regions/tir/caitin2.cs

This would load both scripts, but only the second Caitin would actually
appear in Tir, and could inherit from the first one.

The scripts are loaded in order, so the parent NPCs always have to be loaded
before the children.

Example: (WIP)

Note: At the moment it's not possible to reload virtual NPCs with a command,
  you have to restart the server. Normal NPCs (like the children) will
  reload.

=============================================================================
| Functions                                                                 |
=============================================================================

=== NPC options =============================================================

** SetName(<string:name>)

Sets the name of the NPC.

-----------------------------------------------------------------------------

** SetDialogName(<string:name>)
** SetDialogFace(<string:name>)

Dialog name and face can be used to set names and portraits for the dialog.
Name would replace the default name given in SetName, while Face would
allow you to, for example, display Nao's face while talking to some NPC.
These are mainly helpful in custom NPCs, as default NPCs already have
these values defined in the client.

-----------------------------------------------------------------------------

** SetRace(<uint:race>)

Sets the race of the NPC.

-----------------------------------------------------------------------------

** SetLocation(<uint:region>, <uint:x>, <uint:y>)

Sets the region and position of the NPC.

-----------------------------------------------------------------------------

** SetBody( [<float:height>=1.0f[, <float:fat>=1.0f[, <float:upper>=1.0f][, <float:lower>=1.0f]]] )

Sets the body attributes of the NPC.

Examples:
    SetBody(1.3f, 1.0f, 1.0f, 1.0f); // Sets all
    SetBody(1.3f);                   // Sets only height, default for others
    SetBody(lower : 1.3f);           // Sets only lower, default for others (Named parameter)

-----------------------------------------------------------------------------

** SetDirection(<byte:direction>)

Sets the direction the NPC looks at.
Since this function takes a byte, it ranges from 0 to 255,
0 being east, 127 west, etc.

-----------------------------------------------------------------------------

** SetColor([<uint:color1>[, <uint:color2>[, <uint:color3>]]])

Sets the color for this NPC. (Ineffective for many races.)

-----------------------------------------------------------------------------

** SetStand(<string:style>)

Sets the stand style for the NPC.

=== Communication ===========================================================

** Msg(<MabiClient:client>, {string:messages})

Sends the given message to the client. The messages will get concatenated,
to form a text where every line is one string parameter.

Examples:
    Msg(c, "Line 1", "Line 2", "Line 3");           // 3 line text
	Msg(c, "(Caitin is looking in my direction.)"); // Displays the message
	
-----------------------------------------------------------------------------

** MsgSelect(<MabiClient:client>, <string:message>{, string:buttons})

Sends the given message to the client.
Unlike 'Msg', this takes only one string as the message
and the remaining ones as buttons, that are appended to the message
to create clickable buttons. You always need 2 paramters per button,
the button text, and the keyword.
A line break in the message is possible by using '<br/>'.

Examples:
    MsgSelect(c, "Example Message");                  // Simple message with an [End] button
    MsgSelect(c, "Example Message", "Test", "@test"); // Message 1 button, saying "Test"
    MsgSelect(c, "Example Message", "Start Convorsation", "@talk", "Shop", "@shop");

-----------------------------------------------------------------------------

** MsgInput(<MabiClient:client>, <string:message>, [<string:title>="Input"[, <string:description>=""[, <byte:maxLen>=20[, <bool:cancelable>=true]]]])

Sends the given message to the client, and opens an input box. If the player
cancels the input, the response code will be "@cancel". If he enters
something, the code will be "@input", and the second parameter of OnSelect
will contain the input string. For an example, see the bank NPCs.
You can use "<br/>" in message to create line breaks, if a function
doesn't support dynamic line concatenation, like here.

-----------------------------------------------------------------------------

** Select(<MabiClient:client>)

Notifies the client that he can select something now. This should be send
after a message that contained buttons, so you can get some response.
When using 'MsgSelect' or 'ShowKeywords', this is sent automatically,
and doesn't have to follow the other command.
	
-----------------------------------------------------------------------------

** Enable(<MabiClient:client>, {Options:what})
** Disable(<MabiClient:client>, {Options:what})

These command enable/disable the NPC portrait and/or name, until it's
changed again. This is limited to the current session of the player.

Examples:
	Msg(c, "Hi there!");
    Disable(c, Options.FaceAndName);
	Msg(c, "(Caitin is looking in my direction.)");
	...
    Enable(c, Options.FaceAndName);
	Msg(c, "This message has a face and name, the one before didn't.");

Options:
    Options.Face
    Options.Name
    Options.FaceAndName

Being a bitmask, you can use bitwise operations on the options,
if you want for some reason.

    Options.Face | Options.Name

=== Shops ===================================================================

** OpenShop(<MabiClient:client>)

Opens the shop of the current NPC.
Note: Not sending some kind of message before this will trap you in
  the dialog.

-----------------------------------------------------------------------------

** Shop.AddItem(<string:tab_name>, <uint:item_id>[, <ushort:amount>=1[, <int:price>=default]])
** Shop.AddItem(<string:tab_name>, <uint:item_id>[, <uint:color1>=random[, <uint:color2>=random[, <uint:color3>=random[, <ushort:amount>=1[, <int:price>]]]]])

Adds item to the shop. If price is ommited, the default price from the item
database is used. If the colors are ommited, random colors will be generated.

Examples:
    Shop.AddItem("Equipment", 19081, 51);                    // Nuadha's Robe for 51 gold
    Shop.AddItem("Equipment", 19081, 0, 0, 0);               // Pure black Nuadha's Robe for 89,000 gold (default)
    Shop.AddItem("Equipment", 19081, color1 : 0, price : 0); // Partially black Nuadha's Robe for free
    Shop.AddItem("Stuff", "Sugar", 10);                      // 10x Sugar

-----------------------------------------------------------------------------

** Shop.AddTabs({string:tab_name})

Takes a variable amount of tab names, and adds them to the shop.

Examples:
    Shop.AddTabs("Grocery", "Gift", "Quest", "Event");

=== Props ===================================================================

** SpawnProp(<uint:prop_class>, <uint:region>, <uint:x>, <uint:y>[, <uint:area>[, <float:scale>[, <float:direction>]]])
** SpawnProp(<uint:prop_class>, <string:region>, <uint:x>, <uint:y>[, <uint:area>[, <float:scale>[, <float:direction>]]])

Adds a new prop to the world at the specified location. If area isn't
specified, the prop will not work properly, use gm command "where" to get the
area you're currently at.

Examples:
    SpawnProp(1, "tir", 13000, 37000, 9); // Tree near Tir square
